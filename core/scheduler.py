"""
–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á,
—Ç–∞–∫–∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –æ—Ç—á–µ—Ç–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏ —Ç.–¥.
"""

import asyncio
import logging
import aioschedule
from datetime import datetime, time
from typing import Optional, Callable, Awaitable, List
from aiogram import Bot
from config.config import Config
from core.database import get_active_users

logger = logging.getLogger(__name__)

# –¢–∏–ø –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—á–∏
TaskFunc = Callable[[Bot], Awaitable[None]]

# –°–ª–æ–≤–∞—Ä—å —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
_tasks: List[str] = []

async def _run_scheduler():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞.
    """
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def setup_scheduler(bot: Bot, config: Config) -> aioschedule.Scheduler:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–¥–∞—á–∏.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
    Returns:
        –û–±—ä–µ–∫—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    daily_reminder_time = config.daily_reminder_time
    aioschedule.every().day.at(daily_reminder_time).do(send_daily_reminder, bot)
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {daily_reminder_time}")
    _tasks.append(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {daily_reminder_time}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    weekly_report_day = config.weekly_report_day
    weekly_report_time = config.weekly_report_time
    
    day_names = [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]
    
    if weekly_report_day == 0:
        aioschedule.every().monday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 1:
        aioschedule.every().tuesday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 2:
        aioschedule.every().wednesday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 3:
        aioschedule.every().thursday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 4:
        aioschedule.every().friday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 5:
        aioschedule.every().saturday.at(weekly_report_time).do(send_weekly_reports, bot)
    elif weekly_report_day == 6:
        aioschedule.every().sunday.at(weekly_report_time).do(send_weekly_reports, bot)
    
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ {day_names[weekly_report_day]} –≤ {weekly_report_time}")
    _tasks.append(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ {day_names[weekly_report_day]} –≤ {weekly_report_time}")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(_run_scheduler())
    
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å {len(_tasks)} –∑–∞–¥–∞—á–∞–º–∏")
    return aioschedule

async def register_task(task_func: TaskFunc, schedule: str, time_str: str = None, bot: Bot = None) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.
    
    Args:
        task_func: –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—á–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
        schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ("daily", "weekly", "monthly" –∏–ª–∏ custom).
        time_str: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM").
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        
    Returns:
        True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    try:
        if schedule == "daily":
            if time_str:
                aioschedule.every().day.at(time_str).do(task_func, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_str}")
            else:
                aioschedule.every().day.do(task_func, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        elif schedule == "weekly":
            if time_str:
                aioschedule.every().monday.at(time_str).do(task_func, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ {time_str}")
            else:
                aioschedule.every().monday.do(task_func, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º")
        elif schedule == "monthly":
            # –î–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞–¥–∞—á –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞,
            # —Ç–∞–∫ –∫–∞–∫ aioschedule –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é
            async def monthly_wrapper(bot):
                now = datetime.now()
                if now.day == 1:  # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    await task_func(bot)
            
            if time_str:
                aioschedule.every().day.at(time_str).do(monthly_wrapper, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ {time_str}")
            else:
                aioschedule.every().day.do(monthly_wrapper, bot)
                _tasks.append(f"{task_func.__name__} –µ–∂–µ–º–µ—Å—è—á–Ω–æ")
        else:
            # –î–ª—è custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            # –≠—Ç–æ –º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            eval(f"aioschedule.every().{schedule}.do(task_func, bot)")
            _tasks.append(f"{task_func.__name__} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {schedule}")
        
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_func.__name__} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_func.__name__}: {e}")
        return False

async def get_scheduled_tasks() -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á.
    """
    return _tasks.copy()

#
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
#

async def send_daily_reminder(bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        active_users = await get_active_users(days=7)
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        reminder_message = (
            "üîî *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—é –∞—Ä–º—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            "–í—Å–µ–≥–æ 10-15 –º–∏–Ω—É—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏.\n\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /review –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /learn –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"
        )
        
        # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        success_count = 0
        failed_count = 0
        
        for user_id in active_users:
            try:
                await bot.send_message(user_id, reminder_message, parse_mode="Markdown")
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –£—Å–ø–µ—à–Ω–æ: {success_count}, –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def send_weekly_reports(bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        active_users = await get_active_users(days=30)
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –º–æ–¥—É–ª—è analytics
        # –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        
        report_message = (
            "üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ*\n\n"
            "–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é:\n\n"
            "‚Ä¢ –ò–∑—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ...\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ...\n"
            "‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: ...%\n"
            "‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞: ...\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É."
        )
        
        # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        success_count = 0
        failed_count = 0
        
        for user_id in active_users:
            try:
                await bot.send_message(user_id, report_message, parse_mode="Markdown")
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã. –£—Å–ø–µ—à–Ω–æ: {success_count}, –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")