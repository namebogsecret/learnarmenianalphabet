"""
–ò–≥—Ä–∞ "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞—Ä–º—è–Ω—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
"""

import random
import logging
from typing import List, Dict, Tuple, Optional, Set

logger = logging.getLogger(__name__)

class WordMatchGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Attributes:
        word_pairs: –ü–∞—Ä—ã —Å–ª–æ–≤ (—Ä—É—Å—Å–∫–æ–µ - –∞—Ä–º—è–Ω—Å–∫–æ–µ).
        russian_words: –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤.
        armenian_words: –°–ø–∏—Å–æ–∫ –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.
        matched_pairs: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä.
        attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
        selected_word: –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
    """
    
    def __init__(self, word_pairs: List[Tuple[str, str]], shuffle: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
        
        Args:
            word_pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(—Ä—É—Å—Å–∫–æ–µ, –∞—Ä–º—è–Ω—Å–∫–æ–µ), ...].
            shuffle: –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ª–∏ —Å–ª–æ–≤–∞.
        """
        self.word_pairs = word_pairs
        self.russian_words = [pair[0] for pair in word_pairs]
        self.armenian_words = [pair[1] for pair in word_pairs]
        
        if shuffle:
            random.shuffle(self.russian_words)
            random.shuffle(self.armenian_words)
        
        self.matched_pairs: Set[Tuple[str, str]] = set()
        self.attempts = 0
        self.selected_word: Optional[str] = None
        self.selected_language: Optional[str] = None
    
    def select_word(self, word: str, language: str) -> bool:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        
        Args:
            word: –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
            language: –Ø–∑—ã–∫ —Å–ª–æ–≤–∞ ('russian' –∏–ª–∏ 'armenian').
            
        Returns:
            True, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        for rus, arm in self.matched_pairs:
            if (language == 'russian' and rus == word) or (language == 'armenian' and arm == word):
                return False
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        if self.selected_word is None:
            self.selected_word = word
            self.selected_language = language
            return True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.attempts += 1
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å–ª–æ–≤–∞ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        if self.selected_language == language:
            self.selected_word = word
            self.selected_language = language
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        russian_word = word if language == 'russian' else self.selected_word
        armenian_word = word if language == 'armenian' else self.selected_word
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        for rus, arm in self.word_pairs:
            if rus == russian_word and arm == armenian_word:
                self.matched_pairs.add((rus, arm))
                self.selected_word = None
                self.selected_language = None
                return True
        
        # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        self.selected_word = None
        self.selected_language = None
        return False
    
    def check_match(self, russian_word: str, armenian_word: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞—Ä–º—è–Ω—Å–∫–∏–º —Å–ª–æ–≤–∞–º–∏.
        
        Args:
            russian_word: –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ.
            armenian_word: –ê—Ä–º—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ.
            
        Returns:
            True, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–∑—É—é—Ç –ø–∞—Ä—É, –∏–Ω–∞—á–µ False.
        """
        for rus, arm in self.word_pairs:
            if rus == russian_word and arm == armenian_word:
                return True
        return False
    
    def is_completed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        return len(self.matched_pairs) == len(self.word_pairs)
    
    def get_available_words(self, language: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
        
        Args:
            language: –Ø–∑—ã–∫ ('russian' –∏–ª–∏ 'armenian').
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.
        """
        if language == 'russian':
            all_words = self.russian_words
        else:
            all_words = self.armenian_words
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        matched_words = set()
        for rus, arm in self.matched_pairs:
            if language == 'russian':
                matched_words.add(rus)
            else:
                matched_words.add(arm)
        
        return [word for word in all_words if word not in matched_words]
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        message = (
            f"üéÆ <b>–ò–≥—Ä–∞ '–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π'</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: <b>{len(self.matched_pairs)}/{len(self.word_pairs)}</b>\n"
            f"–ü–æ–ø—ã—Ç–æ–∫: <b>{self.attempts}</b>\n\n"
        )
        
        if self.selected_word:
            message += f"–í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ: <b>{self.selected_word}</b>\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã —Ä—É—Å—Å–∫–∏—Ö –∏ –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
        if self.matched_pairs:
            message += "<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
            for rus, arm in self.matched_pairs:
                message += f"‚Ä¢ {rus} - {arm}\n"
        
        return message
    
    def get_game_result(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        """
        message = (
            f"üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ {len(self.word_pairs)} –ø–∞—Ä —Å–ª–æ–≤ –∑–∞ {self.attempts} –ø–æ–ø—ã—Ç–æ–∫!\n\n"
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
        )
        
        for rus, arm in self.word_pairs:
            message += f"‚Ä¢ {rus} - {arm}\n"
        
        message += "\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?"
        
        return message


async def get_pairs_for_word_match(user_id: int, count: int = 5, db_path: str = 'translations.db') -> List[Tuple[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä—ã —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–ª–æ–≤.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(—Ä—É—Å—Å–∫–æ–µ, –∞—Ä–º—è–Ω—Å–∫–æ–µ), ...].
    """
    from core.database import execute_query
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = await execute_query(
            """
            SELECT word, translation 
            FROM srs_cards 
            WHERE user_id = ?
            ORDER BY RANDOM()
            LIMIT ?
            """,
            (user_id, count),
            db_path,
            fetch=True
        )
        
        pairs = [(card['word'], card['translation']) for card in cards] if cards else []
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫, –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        if len(pairs) < count:
            words = await execute_query(
                """
                SELECT word, translation 
                FROM translation_dict
                WHERE word NOT IN (SELECT word FROM srs_cards WHERE user_id = ?)
                ORDER BY RANDOM()
                LIMIT ?
                """,
                (user_id, count - len(pairs)),
                db_path,
                fetch=True
            )
            
            pairs.extend([(word['word'], word['translation']) for word in words] if words else [])
        
        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if len(pairs) < count:
            default_pairs = [
                ("–ø—Ä–∏–≤–µ—Ç", "’¢’°÷Ä÷á"),
                ("—Å–ø–∞—Å–∏–±–æ", "’∑’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂"),
                ("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "’≠’∂’§÷Ä’•’¥"),
                ("–¥–∞", "’°’µ’∏"),
                ("–Ω–µ—Ç", "’∏’π"),
                ("–∞—Ä–º—è–Ω—Å–∫–∏–π", "’∞’°’µ’•÷Ä’•’∂"),
                ("—è–∑—ã–∫", "’¨’•’¶’∏÷Ç"),
                ("–∏–∑—É—á–∞—Ç—å", "’Ω’∏’æ’∏÷Ä’•’¨"),
                ("—Å–ª–æ–≤–æ", "’¢’°’º"),
                ("–ø–µ—Ä–µ–≤–æ–¥", "’©’°÷Ä’£’¥’°’∂’∏÷Ç’©’µ’∏÷Ç’∂")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä—ã
            for i in range(min(count - len(pairs), len(default_pairs))):
                pairs.append(default_pairs[i])
        
        return pairs
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã '–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π': {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã
        return [
            ("–ø—Ä–∏–≤–µ—Ç", "’¢’°÷Ä÷á"),
            ("—Å–ø–∞—Å–∏–±–æ", "’∑’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂"),
            ("–¥–∞", "’°’µ’∏"),
            ("–Ω–µ—Ç", "’∏’π"),
            ("—è–∑—ã–∫", "’¨’•’¶’∏÷Ç")
        ]