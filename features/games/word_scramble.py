"""
–ò–≥—Ä–∞ "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
"""

import random
import logging
from typing import List, Optional, Tuple

logger = logging.getLogger(__name__)

class WordScrambleGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Attributes:
        word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ.
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        scrambled_word: –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        hints_left: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.
        attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
    """
    
    def __init__(self, word: str, translation: str, max_hints: int = 2):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
        
        Args:
            word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ.
            translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
            max_hints: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
        """
        self.word = word.lower()
        self.translation = translation
        self.scrambled_word = self._scramble_word()
        self.hints_left = max_hints
        self.attempts = 0
    
    def _scramble_word(self) -> str:
        """
        –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ.
        
        Returns:
            –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        chars = list(self.word)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º
        scrambled = ''.join(chars)
        while scrambled == self.word and len(chars) > 1:
            random.shuffle(chars)
            scrambled = ''.join(chars)
        
        return scrambled
    
    def check_answer(self, answer: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
        Returns:
            True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏–Ω–∞—á–µ False.
        """
        self.attempts += 1
        return answer.lower() == self.word.lower()
    
    def get_hint(self) -> str:
        """
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É - —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Å—Ç—å —Å–ª–æ–≤–∞.
        
        Returns:
            –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.
        """
        if self.hints_left <= 0:
            return "–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Å–∫–∞–∑–æ–∫."
        
        self.hints_left -= 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ä–∞—Å–∫—Ä—ã–≤–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞
        revealed_count = min(len(self.word) // 2, self.hints_left + 1)
        positions = random.sample(range(len(self.word)), revealed_count)
        
        hint = []
        for i, char in enumerate(self.word):
            if i in positions:
                hint.append(char)
            else:
                hint.append("_")
        
        return f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {''.join(hint)}"
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        message = (
            f"üéÆ <b>–ò–≥—Ä–∞ '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤'</b>\n\n"
            f"–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤: <b>{' '.join(self.scrambled_word)}</b>\n\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{self.attempts}</b>\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: <b>{self.hints_left}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞'."
        )
        
        return message


async def get_word_for_scramble(user_id: int, min_length: int = 4, max_length: int = 8, db_path: str = 'translations.db') -> Tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞.
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥).
    """
    from core.database import execute_query
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = await execute_query(
            """
            SELECT word, translation 
            FROM srs_cards 
            WHERE user_id = ? AND length(word) BETWEEN ? AND ?
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (user_id, min_length, max_length),
            db_path,
            fetch=True
        )
        
        if cards and cards[0]:
            return cards[0]['word'], cards[0]['translation']
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –±–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        words = await execute_query(
            """
            SELECT word, translation 
            FROM translation_dict
            WHERE length(word) BETWEEN ? AND ?
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (min_length, max_length),
            db_path,
            fetch=True
        )
        
        if words and words[0]:
            return words[0]['word'], words[0]['translation']
        
        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        return "–∞—Ä–º—è–Ω—Å–∫–∏–π", "’∞’°’µ’•÷Ä’•’∂"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤': {e}")
        return "—è–∑—ã–∫", "’¨’•’¶’∏÷Ç"