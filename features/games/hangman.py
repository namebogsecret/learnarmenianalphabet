"""
–ò–≥—Ä–∞ "–í–∏—Å–µ–ª–∏—Ü–∞" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥—ã–≤–∞–µ—Ç –±—É–∫–≤—ã –≤ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–≤–µ, –∏–º–µ—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥—É–ª—è –∏–≥—Ä.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏ "–í–∏—Å–µ–ª–∏—Ü–∞", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤" –∏ "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
"""

import logging
import asyncio
import random
from typing import Dict, List, Optional, Any, Union, Set, Tuple

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config.config import Config
from features.games.states import GameStates
from features.games.hangman import HangmanGame, get_random_word_for_game
from features.games.word_scramble import WordScrambleGame, get_word_for_scramble
from features.games.word_match import WordMatchGame, get_pairs_for_word_match
from keyboards.inline import get_games_keyboard, get_back_button, get_confirmation_keyboard
from services.translation import translate_and_save

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
hangman_games: Dict[int, HangmanGame] = {}
scramble_games: Dict[int, WordScrambleGame] = {}
match_games: Dict[int, WordMatchGame] = {}

class HangmanGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Attributes:
        word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        guessed_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        wrong_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        attempts_left: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
    """
    
    def __init__(self, word: str, translation: str, max_attempts: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞".
        
        Args:
            word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
            translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–∏–π.
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        """
        self.word = word.lower()
        self.translation = translation
        self.guessed_letters: Set[str] = set()
        self.wrong_letters: Set[str] = set()
        self.max_attempts = max_attempts
        self.attempts_left = max_attempts
    
    def guess_letter(self, letter: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—É–∫–≤—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
        
        Args:
            letter: –ë—É–∫–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
            
        Returns:
            True, –µ—Å–ª–∏ –±—É–∫–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–µ, –∏–Ω–∞—á–µ False.
        """
        if not letter or len(letter) != 1:
            return False
        
        letter = letter.lower()
        
        # –ï—Å–ª–∏ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞ —É–≥–∞–¥–∞–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ–¥–æ–º
        if letter in self.guessed_letters or letter in self.wrong_letters:
            return False
        
        if letter in self.word:
            self.guessed_letters.add(letter)
            return True
        else:
            self.wrong_letters.add(letter)
            self.attempts_left -= 1
            return False
    
    def get_masked_word(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã–º–∏.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –±—É–∫–≤–∞–º–∏.
        """
        return ''.join([letter if letter in self.guessed_letters or letter.isspace() else '_' for letter in self.word])
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        masked_word = self.get_masked_word()
        
        message = f"üéÆ <b>–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'</b>\n\n"
        message += f"–°–ª–æ–≤–æ: <b>{' '.join(masked_word)}</b>\n\n"
        
        if self.wrong_letters:
            message += f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: <b>{', '.join(sorted(self.wrong_letters))}</b>\n"
        
        message += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{self.attempts_left}</b> –∏–∑ <b>{self.max_attempts}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Å–µ–ª–∏—Ü—ã
        hangman_stages = [
            # 0 –æ—à–∏–±–æ–∫
            """
            --------
            |      
            |      
            |     
            |     
            |     
            ---------
            """,
            # 1 –æ—à–∏–±–∫–∞ - –≥–æ–ª–æ–≤–∞
            """
            --------
            |      O
            |      
            |     
            |     
            |     
            ---------
            """,
            # 2 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞ –∏ —Ç—É–ª–æ–≤–∏—â–µ
            """
            --------
            |      O
            |      |
            |     
            |     
            |     
            ---------
            """,
            # 3 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
            """
            --------
            |      O
            |     /|
            |     
            |     
            |     
            ---------
            """,
            # 4 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ –∏ –æ–±–µ —Ä—É–∫–∏
            """
            --------
            |      O
            |     /|\\
            |     
            |     
            |     
            ---------
            """,
            # 5 –æ—à–∏–±–æ–∫ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ, –æ–±–µ —Ä—É–∫–∏ –∏ –æ–¥–Ω–∞ –Ω–æ–≥–∞
            """
            --------
            |      O
            |     /|\\
            |     / 
            |     
            |     
            ---------
            """,
            # 6 –æ—à–∏–±–æ–∫ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–∞—è –≤–∏—Å–µ–ª–∏—Ü–∞
            """
            --------
            |      O
            |     /|\\
            |     / \\
            |     
            |     
            ---------
            """
        ]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –≤–∏—Å–µ–ª–∏—Ü—ã
        error_count = self.max_attempts - self.attempts_left
        if 0 <= error_count < len(hangman_stages):
            message += f"<pre>{hangman_stages[error_count]}</pre>\n"
        
        return message
    
    def is_game_over(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ), –∏–Ω–∞—á–µ False.
        """
        return self.is_win() or self.attempts_left <= 0
    
    def is_win(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ —É–≥–∞–¥–∞–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        for letter in self.word:
            if letter not in self.guessed_letters and letter.isalpha():
                return False
        return True
    
    def get_game_result(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        """
        if self.is_win():
            return (
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {self.max_attempts - self.attempts_left} –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."
            )
        else:
            return (
                f"üò¢ <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )


async def get_random_word_for_game(user_id: int, db_path: str = 'translations.db') -> Tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥).
    """
    from core.database import execute_query
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = await execute_query(
            """
            SELECT word, translation 
            FROM srs_cards 
            WHERE user_id = ?
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (user_id,),
            db_path,
            fetch=True
        )
        
        if cards and cards[0]:
            return cards[0]['word'], cards[0]['translation']
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, –±–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        words = await execute_query(
            """
            SELECT word, translation 
            FROM translation_dict
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (),
            db_path,
            fetch=True
        )
        
        if words and words[0]:
            return words[0]['word'], words[0]['translation']
        
        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        return "–∞—Ä–º—è–Ω—Å–∫–∏–π", "’∞’°’µ’•÷Ä’•’∂"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
        return "—è–∑—ã–∫", "’¨’•’¶’∏÷Ç"
    

