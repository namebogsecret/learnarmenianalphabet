"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥—É–ª—è –∏–≥—Ä.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏ "–í–∏—Å–µ–ª–∏—Ü–∞", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤" –∏ "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
"""

import logging
import asyncio
import random
from typing import Dict, List, Optional, Any, Union

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config.config import Config
from features.games.states import GameStates
from keyboards.inline import get_games_keyboard, get_back_button, get_confirmation_keyboard

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
hangman_games = {}
scramble_games = {}
match_games = {}


async def cmd_games(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = get_games_keyboard()
    
    await message.answer(
        "üéÆ <b>–ò–≥—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–º—è–Ω—Å–∫–æ–≥–æ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –∏ —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏:\n\n"
        "‚Ä¢ <b>–í–∏—Å–µ–ª–∏—Ü–∞</b> - —É–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º\n"
        "‚Ä¢ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</b> - —Å–æ–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –±—É–∫–≤\n"
        "‚Ä¢ <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è</b> - –Ω–∞–π–¥–∏—Ç–µ –ø–∞—Ä—ã —Ä—É—Å—Å–∫–∏—Ö –∏ –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤\n\n"
        "–ò–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def process_game_selection(callback_query: types.CallbackQuery, state: FSMContext, config: Config = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –∏–∑ –º–µ–Ω—é.
    
    Args:
        callback_query: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    db_path = config.db_path if config else 'translations.db'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –∏–∑ callback_data
    game = callback_query.data.split(":")[1]
    
    if game == "hangman":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞"
        await start_hangman_game(callback_query.message, user_id, db_path, state)
    
    elif game == "scramble":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤"
        await start_scramble_game(callback_query.message, user_id, db_path, state)
    
    elif game == "wordmatch":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π"
        await start_match_game(callback_query.message, user_id, db_path, state)
    
    elif game == "results":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
        await show_game_stats(callback_query.message, user_id, db_path)
    
    else:
        await callback_query.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

async def start_hangman_game(message: types.Message, user_id: int, db_path: str, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã
    word, translation = await get_random_word_for_game(user_id, db_path)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    game = HangmanGame(word, translation)
    hangman_games[user_id] = game
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await message.answer(
        game.get_status_message(),
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = get_hangman_keyboard()
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await GameStates.playing_hangman.set()

def get_hangman_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—É–∫–≤–∞–º–∏.
    """
    keyboard = InlineKeyboardMarkup(row_width=7)
    
    # –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
    alphabet = [
        "–∞", "–±", "–≤", "–≥", "–¥", "–µ", "—ë",
        "–∂", "–∑", "–∏", "–π", "–∫", "–ª", "–º", 
        "–Ω", "–æ", "–ø", "—Ä", "—Å", "—Ç", "—É", 
        "—Ñ", "—Ö", "—Ü", "—á", "—à", "—â", "—ä", 
        "—ã", "—å", "—ç", "—é", "—è"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    for letter in alphabet:
        buttons.append(InlineKeyboardButton(letter, callback_data=f"letter:{letter}"))
    
    keyboard.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
    keyboard.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="game:exit"))
    
    return keyboard

async def process_hangman_letter(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in hangman_games:
        await message.answer(
            "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /games."
        )
        await state.finish()
        return
    
    game = hangman_games[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = message.text.strip().lower()
    
    if len(text) != 1 or not text.isalpha():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞."
        )
        return
    
    # –î–µ–ª–∞–µ–º —Ö–æ–¥
    result = game.guess_letter(text)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await update_hangman_game(message.chat.id, user_id, message.message_id)

async def process_hangman_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –±—É–∫–≤—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Args:
        callback_query: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in hangman_games:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = callback_query.data.split(":")
    
    if data[0] == "letter":
        letter = data[1]
        game = hangman_games[user_id]
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = game.guess_letter(letter)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if result:
            await callback_query.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω–æ!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        await update_hangman_game(callback_query.message.chat.id, user_id, callback_query.message.message_id)
    
    elif data[0] == "game" and data[1] == "exit":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await end_hangman_game(callback_query.message, user_id, state, "–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        await callback_query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def update_hangman_game(chat_id: int, user_id: int, message_id: Optional[int] = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        chat_id: ID —á–∞—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    game = hangman_games[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if game.is_game_over():
        await end_hangman_game_with_result(chat_id, user_id)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    status_message = game.get_status_message()
    keyboard = get_hangman_keyboard()
    
    try:
        if message_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await types.Bot.get_current().edit_message_text(
                status_message,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await types.Bot.get_current().send_message(
                chat_id,
                status_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await types.Bot.get_current().send_message(
            chat_id,
            status_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

async def end_hangman_game_with_result(chat_id: int, user_id: int):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    
    Args:
        chat_id: ID —á–∞—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    game = hangman_games[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    result_message = game.get_game_result()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="game:hangman"))
    keyboard.add(InlineKeyboardButton("üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="menu:games"))
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
    
    await types.Bot.get_current().send_message(
        chat_id,
        result_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if user_id in hangman_games:
        del hangman_games[user_id]

async def end_hangman_game(message: types.Message, user_id: int, state: FSMContext, reason: str = ""):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞" –¥–æ—Å—Ä–æ—á–Ω–æ.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
    """
    if user_id in hangman_games:
        game = hangman_games[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        result_message = (
            f"üéÆ <b>–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"{reason}\n\n"
            f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{game.word}</b>\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: <b>{game.translation}</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="game:hangman"))
        keyboard.add(InlineKeyboardButton("üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="menu:games"))
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
        
        await message.answer(
            result_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del hangman_games[user_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def start_scramble_game(message: types.Message, user_id: int, db_path: str, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã
    word, translation = await get_word_for_scramble(user_id, db_path=db_path)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    game = WordScrambleGame(word, translation)
    scramble_games[user_id] = game
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await message.answer(
        game.get_status_message(),
        parse_mode="HTML"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="scramble:hint"),
        InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data="scramble:new_word")
    )
    keyboard.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="game:exit"))
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await GameStates.playing_scramble.set()

async def process_scramble_answer(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in scramble_games:
        await message.answer(
            "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /games."
        )
        await state.finish()
        return
    
    game = scramble_games[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    answer = message.text.strip().lower()
    correct = game.check_answer(answer)
    
    if correct:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —Å –ø–æ–±–µ–¥–æ–π
        await message.answer(
            f"üéâ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ <b>{game.word}</b> - <b>{game.translation}</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{game.attempts}</b>",
            parse_mode="HTML"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="game:scramble"))
        keyboard.add(InlineKeyboardButton("üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="menu:games"))
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
            reply_markup=keyboard
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del scramble_games[user_id]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            f"{game.get_status_message()}",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="scramble:hint"),
            InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data="scramble:new_word")
        )
        keyboard.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="game:exit"))
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π:",
            reply_markup=keyboard
        )

async def process_scramble_callback(callback_query: types.CallbackQuery, state: FSMContext, config: Config = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∏–≥—Ä–µ "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Args:
        callback_query: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    user_id = callback_query.from_user.id
    db_path = config.db_path if config else 'translations.db'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in scramble_games and not callback_query.data.startswith("game:"):
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        await state.finish()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
    if callback_query.data == "scramble:hint":
        game = scramble_games[user_id]
        hint = game.get_hint()
        
        await callback_query.answer()
        await callback_query.message.answer(
            f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞</b>\n\n{hint}",
            parse_mode="HTML"
        )
    
    elif callback_query.data == "scramble:new_word":
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
        word, translation = await get_word_for_scramble(user_id, db_path=db_path)
        game = WordScrambleGame(word, translation)
        scramble_games[user_id] = game
        
        await callback_query.answer("–ó–∞–≥–∞–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        await callback_query.message.edit_text(
            game.get_status_message(),
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="scramble:hint"),
            InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data="scramble:new_word")
        )
        keyboard.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="game:exit"))
        
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π:",
            reply_markup=keyboard
        )
    
    elif callback_query.data == "game:exit":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in scramble_games:
            game = scramble_games[user_id]
            
            await callback_query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback_query.message.answer(
                f"–ò–≥—Ä–∞ '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{game.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{game.translation}</b>",
                parse_mode="HTML"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="menu:games"))
            keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
            
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del scramble_games[user_id]
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()

async def start_match_game(message: types.Message, user_id: int, db_path: str, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã
    pairs = await get_pairs_for_word_match(user_id, count=5, db_path=db_path)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    game = WordMatchGame(pairs)
    match_games[user_id] = game
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await message.answer(
        game.get_status_message(),
        parse_mode="HTML"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏ –∞—Ä–º—è–Ω—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    keyboard = get_match_game_keyboard(game)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, –∑–∞—Ç–µ–º –Ω–∞ –¥—Ä—É–≥–æ–º:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await GameStates.playing_wordmatch.set()

def get_match_game_keyboard(game: WordMatchGame) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Args:
        game: –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã.
        
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏ –∞—Ä–º—è–Ω—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞
    russian_words = game.get_available_words('russian')
    armenian_words = game.get_available_words('armenian')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
    keyboard.add(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞:", callback_data="match:noop"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
    for word in russian_words:
        keyboard.add(InlineKeyboardButton(word, callback_data=f"match:rus:{word}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤
    keyboard.add(InlineKeyboardButton("üá¶üá≤ –ê—Ä–º—è–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞:", callback_data="match:noop"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–º—è–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞
    for word in armenian_words:
        keyboard.add(InlineKeyboardButton(word, callback_data=f"match:arm:{word}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    keyboard.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="game:exit"))
    
    return keyboard

async def process_match_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –≤ –∏–≥—Ä–µ "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Args:
        callback_query: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in match_games and not callback_query.data.startswith("game:"):
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ "noop" (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    if callback_query.data == "match:noop":
        await callback_query.answer()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞
    if callback_query.data.startswith("match:"):
        parts = callback_query.data.split(":")
        if len(parts) == 3:
            language = parts[1]  # 'rus' –∏–ª–∏ 'arm'
            word = parts[2]
            
            game = match_games[user_id]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ
            lang_full = 'russian' if language == 'rus' else 'armenian'
            result = game.select_word(word, lang_full)
            
            if not result:
                # –°–ª–æ–≤–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                await callback_query.answer("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ
            if game.selected_word is None:
                # –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                await callback_query.answer("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
                if game.is_completed():
                    # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await callback_query.message.edit_text(
                        game.get_game_result(),
                        parse_mode="HTML"
                    )
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="game:wordmatch"))
                    keyboard.add(InlineKeyboardButton("üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="menu:games"))
                    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
                    
                    await callback_query.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=keyboard
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    del match_games[user_id]
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.finish()
                else:
                    # –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await callback_query.message.edit_text(
                        game.get_status_message(),
                        parse_mode="HTML"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = get_match_game_keyboard(game)
                    
                    await callback_query.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É —Å–ª–æ–≤:",
                        reply_markup=keyboard
                    )
            else:
                # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤—ã–±—Ä–∞–Ω–æ - –æ–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ
                await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ: {word}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                await callback_query.message.edit_text(
                    game.get_status_message(),
                    parse_mode="HTML"
                )
    
    elif callback_query.data == "game:exit":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in match_games:
            game = match_games[user_id]
            
            await callback_query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            message = "–ò–≥—Ä–∞ '–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
            for rus, arm in game.word_pairs:
                message += f"‚Ä¢ {rus} - {arm}\n"
            
            await callback_query.message.answer(
                message,
                parse_mode="HTML"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="menu:games"))
            keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main"))
            
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del match_games[user_id]
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()

async def show_game_stats(message: types.Message, user_id: int, db_path: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    await message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä.",
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–≥—Ä
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üéÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º", callback_data="menu:games"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def cmd_hangman(message: types.Message, state: FSMContext, config: Config = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hangman.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞" –Ω–∞–ø—Ä—è–º—É—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    user_id = message.from_user.id
    db_path = config.db_path if config else 'translations.db'
    
    await start_hangman_game(message, user_id, db_path, state)

async def cmd_scramble(message: types.Message, state: FSMContext, config: Config = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scramble.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤" –Ω–∞–ø—Ä—è–º—É—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    user_id = message.from_user.id
    db_path = config.db_path if config else 'translations.db'
    
    await start_scramble_game(message, user_id, db_path, state)

async def cmd_wordmatch(message: types.Message, state: FSMContext, config: Config = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wordmatch.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π" –Ω–∞–ø—Ä—è–º—É—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    user_id = message.from_user.id
    db_path = config.db_path if config else 'translations.db'
    
    await start_match_game(message, user_id, db_path, state)

def register_games_handlers(dp: Dispatcher, config: Config = None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è –∏–≥—Ä.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞.
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(cmd_games, commands=["games"])
    dp.register_message_handler(lambda msg: cmd_hangman(msg, dp.current_state(), config), commands=["hangman"])
    dp.register_message_handler(lambda msg: cmd_scramble(msg, dp.current_state(), config), commands=["scramble"])
    dp.register_message_handler(lambda msg: cmd_wordmatch(msg, dp.current_state(), config), commands=["wordmatch"])
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.register_callback_query_handler(
        lambda c: process_game_selection(c, dp.current_state(), config),
        lambda c: c.data.startswith("game:")
    )
    
    dp.register_callback_query_handler(
        lambda c: process_scramble_callback(c, dp.current_state(), config),
        lambda c: c.data.startswith("scramble:") or (c.data == "game:exit" and c.from_user.id in scramble_games),
        state=GameStates.playing_scramble
    )
    
    dp.register_callback_query_handler(
        process_hangman_callback,
        lambda c: c.data.startswith("letter:") or (c.data == "game:exit" and c.from_user.id in hangman_games),
        state=GameStates.playing_hangman
    )
    
    dp.register_callback_query_handler(
        process_match_callback,
        lambda c: c.data.startswith("match:") or (c.data == "game:exit" and c.from_user.id in match_games),
        state=GameStates.playing_wordmatch
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏–≥—Ä–∞—Ö
    dp.register_message_handler(
        process_hangman_letter,
        state=GameStates.playing_hangman,
        content_types=types.ContentTypes.TEXT
    )
    
    dp.register_message_handler(
        process_scramble_answer,
        state=GameStates.playing_scramble,
        content_types=types.ContentTypes.TEXT
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è –∏–≥—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")



class HangmanGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Attributes:
        word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        guessed_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        wrong_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        attempts_left: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
    """
    
    def __init__(self, word: str, translation: str, max_attempts: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞".
        
        Args:
            word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
            translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–∏–π.
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        """
        self.word = word.lower()
        self.translation = translation
        self.guessed_letters: Set[str] = set()
        self.wrong_letters: Set[str] = set()
        self.max_attempts = max_attempts
        self.attempts_left = max_attempts
    
    def guess_letter(self, letter: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—É–∫–≤—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
        
        Args:
            letter: –ë—É–∫–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
            
        Returns:
            True, –µ—Å–ª–∏ –±—É–∫–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–µ, –∏–Ω–∞—á–µ False.
        """
        if not letter or len(letter) != 1:
            return False
        
        letter = letter.lower()
        
        # –ï—Å–ª–∏ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞ —É–≥–∞–¥–∞–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ–¥–æ–º
        if letter in self.guessed_letters or letter in self.wrong_letters:
            return False
        
        if letter in self.word:
            self.guessed_letters.add(letter)
            return True
        else:
            self.wrong_letters.add(letter)
            self.attempts_left -= 1
            return False
    
    def get_masked_word(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã–º–∏.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –±—É–∫–≤–∞–º–∏.
        """
        return ''.join([letter if letter in self.guessed_letters or letter.isspace() else '_' for letter in self.word])
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        masked_word = self.get_masked_word()
        
        message = f"üéÆ <b>–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'</b>\n\n"
        message += f"–°–ª–æ–≤–æ: <b>{' '.join(masked_word)}</b>\n\n"
        
        if self.wrong_letters:
            message += f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: <b>{', '.join(sorted(self.wrong_letters))}</b>\n"
        
        message += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{self.attempts_left}</b> –∏–∑ <b>{self.max_attempts}</b>\n\n"
        
        return message
    
    def is_game_over(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ), –∏–Ω–∞—á–µ False.
        """
        return self.is_win() or self.attempts_left <= 0
    
    def is_win(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ —É–≥–∞–¥–∞–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        for letter in self.word:
            if letter not in self.guessed_letters and letter.isalpha():
                return False
        return True
    
    def get_game_result(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        """
        if self.is_win():
            return (
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {self.max_attempts - self.attempts_left} –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."
            )
        else:
            return (
                f"üò¢ <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )


async def get_random_word_for_game(user_id: int, db_path: str = 'translations.db') -> Tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥).
    """
    from core.database import execute_query
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = await execute_query(
            """
            SELECT word, translation 
            FROM srs_cards 
            WHERE user_id = ?
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (user_id,),
            db_path,
            fetch=True
        )
        
        if cards and cards[0]:
            return cards[0]['word'], cards[0]['translation']
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, –±–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        words = await execute_query(
            """
            SELECT word, translation 
            FROM translation_dict
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (),
            db_path,
            fetch=True
        )
        
        if words and words[0]:
            return words[0]['word'], words[0]['translation']
        
        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        return "–∞—Ä–º—è–Ω—Å–∫–∏–π", "’∞’°’µ’•÷Ä’•’∂"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
        return "—è–∑—ã–∫", "’¨’•’¶’∏÷Ç"