"""
–ú–æ–¥–µ–ª–∏ –∏–≥—Ä –¥–ª—è Armenian Learning Bot.
"""
import logging
import random
from typing import List, Dict, Tuple, Optional, Set

logger = logging.getLogger(__name__)

class HangmanGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
    
    Attributes:
        word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        guessed_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        wrong_letters: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        attempts_left: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
    """
    
    def __init__(self, word: str, translation: str, max_attempts: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞".
        
        Args:
            word: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
            translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–∏–π.
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
        """
        self.word = word.lower()
        self.translation = translation
        self.guessed_letters: Set[str] = set()
        self.wrong_letters: Set[str] = set()
        self.max_attempts = max_attempts
        self.attempts_left = max_attempts
    
    def guess_letter(self, letter: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—É–∫–≤—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
        
        Args:
            letter: –ë—É–∫–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
            
        Returns:
            True, –µ—Å–ª–∏ –±—É–∫–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–µ, –∏–Ω–∞—á–µ False.
        """
        if not letter or len(letter) != 1:
            return False
        
        letter = letter.lower()
        
        # –ï—Å–ª–∏ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞ —É–≥–∞–¥–∞–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ–¥–æ–º
        if letter in self.guessed_letters or letter in self.wrong_letters:
            return False
        
        if letter in self.word:
            self.guessed_letters.add(letter)
            return True
        else:
            self.wrong_letters.add(letter)
            self.attempts_left -= 1
            return False
    
    def get_masked_word(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã–º–∏.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –±—É–∫–≤–∞–º–∏.
        """
        return ''.join([letter if letter in self.guessed_letters or letter.isspace() else '_' for letter in self.word])
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        masked_word = self.get_masked_word()
        
        message = f"üéÆ <b>–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'</b>\n\n"
        message += f"–°–ª–æ–≤–æ: <b>{' '.join(masked_word)}</b>\n\n"
        
        if self.wrong_letters:
            message += f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: <b>{', '.join(sorted(self.wrong_letters))}</b>\n"
        
        message += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{self.attempts_left}</b> –∏–∑ <b>{self.max_attempts}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Å–µ–ª–∏—Ü—ã
        hangman_stages = [
            # 0 –æ—à–∏–±–æ–∫
            """
            --------
            |      
            |      
            |     
            |     
            |     
            ---------
            """,
            # 1 –æ—à–∏–±–∫–∞ - –≥–æ–ª–æ–≤–∞
            """
            --------
            |      O
            |      
            |     
            |     
            |     
            ---------
            """,
            # 2 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞ –∏ —Ç—É–ª–æ–≤–∏—â–µ
            """
            --------
            |      O
            |      |
            |     
            |     
            |     
            ---------
            """,
            # 3 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
            """
            --------
            |      O
            |     /|
            |     
            |     
            |     
            ---------
            """,
            # 4 –æ—à–∏–±–∫–∏ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ –∏ –æ–±–µ —Ä—É–∫–∏
            """
            --------
            |      O
            |     /|\\
            |     
            |     
            |     
            ---------
            """,
            # 5 –æ—à–∏–±–æ–∫ - –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ, –æ–±–µ —Ä—É–∫–∏ –∏ –æ–¥–Ω–∞ –Ω–æ–≥–∞
            """
            --------
            |      O
            |     /|\\
            |     / 
            |     
            |     
            ---------
            """,
            # 6 –æ—à–∏–±–æ–∫ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–∞—è –≤–∏—Å–µ–ª–∏—Ü–∞
            """
            --------
            |      O
            |     /|\\
            |     / \\
            |     
            |     
            ---------
            """
        ]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –≤–∏—Å–µ–ª–∏—Ü—ã
        error_count = self.max_attempts - self.attempts_left
        if 0 <= error_count < len(hangman_stages):
            message += f"<pre>{hangman_stages[error_count]}</pre>\n"
        
        return message
    
    def is_game_over(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ), –∏–Ω–∞—á–µ False.
        """
        return self.is_win() or self.attempts_left <= 0
    
    def is_win(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ —É–≥–∞–¥–∞–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        for letter in self.word:
            if letter not in self.guessed_letters and letter.isalpha():
                return False
        return True
    
    def get_game_result(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        """
        if self.is_win():
            return (
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {self.max_attempts - self.attempts_left} –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."
            )
        else:
            return (
                f"üò¢ <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{self.word}</b>\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
                f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )

class WordScrambleGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
    
    Attributes:
        word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ.
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
        scrambled_word: –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        hints_left: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.
        attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
    """
    
    def __init__(self, word: str, translation: str, max_hints: int = 2):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤".
        
        Args:
            word: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ.
            translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
            max_hints: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
        """
        self.word = word.lower()
        self.translation = translation
        self.scrambled_word = self._scramble_word()
        self.hints_left = max_hints
        self.attempts = 0
    
    def _scramble_word(self) -> str:
        """
        –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ.
        
        Returns:
            –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        chars = list(self.word)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º
        scrambled = ''.join(chars)
        while scrambled == self.word and len(chars) > 1:
            random.shuffle(chars)
            scrambled = ''.join(chars)
        
        return scrambled
    
    def check_answer(self, answer: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
        Returns:
            True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏–Ω–∞—á–µ False.
        """
        self.attempts += 1
        return answer.lower() == self.word.lower()
    
    def get_hint(self) -> str:
        """
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É - —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Å—Ç—å —Å–ª–æ–≤–∞.
        
        Returns:
            –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.
        """
        if self.hints_left <= 0:
            return "–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Å–∫–∞–∑–æ–∫."
        
        self.hints_left -= 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ä–∞—Å–∫—Ä—ã–≤–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞
        revealed_count = min(len(self.word) // 2, self.hints_left + 1)
        positions = random.sample(range(len(self.word)), revealed_count)
        
        hint = []
        for i, char in enumerate(self.word):
            if i in positions:
                hint.append(char)
            else:
                hint.append("_")
        
        return f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {''.join(hint)}"
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        message = (
            f"üéÆ <b>–ò–≥—Ä–∞ '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤'</b>\n\n"
            f"–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤: <b>{' '.join(self.scrambled_word)}</b>\n\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: <b>{self.translation}</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{self.attempts}</b>\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: <b>{self.hints_left}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞'."
        )
        
        return message

class WordMatchGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
    
    Attributes:
        word_pairs: –ü–∞—Ä—ã —Å–ª–æ–≤ (—Ä—É—Å—Å–∫–æ–µ - –∞—Ä–º—è–Ω—Å–∫–æ–µ).
        russian_words: –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤.
        armenian_words: –°–ø–∏—Å–æ–∫ –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.
        matched_pairs: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä.
        attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
        selected_word: –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
    """
    
    def __init__(self, word_pairs: List[Tuple[str, str]], shuffle: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π".
        
        Args:
            word_pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(—Ä—É—Å—Å–∫–æ–µ, –∞—Ä–º—è–Ω—Å–∫–æ–µ), ...].
            shuffle: –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ª–∏ —Å–ª–æ–≤–∞.
        """
        self.word_pairs = word_pairs
        self.russian_words = [pair[0] for pair in word_pairs]
        self.armenian_words = [pair[1] for pair in word_pairs]
        
        if shuffle:
            random.shuffle(self.russian_words)
            random.shuffle(self.armenian_words)
        
        self.matched_pairs: Set[Tuple[str, str]] = set()
        self.attempts = 0
        self.selected_word: Optional[str] = None
        self.selected_language: Optional[str] = None
    
    def select_word(self, word: str, language: str) -> bool:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        
        Args:
            word: –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
            language: –Ø–∑—ã–∫ —Å–ª–æ–≤–∞ ('russian' –∏–ª–∏ 'armenian').
            
        Returns:
            True, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        for rus, arm in self.matched_pairs:
            if (language == 'russian' and rus == word) or (language == 'armenian' and arm == word):
                return False
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        if self.selected_word is None:
            self.selected_word = word
            self.selected_language = language
            return True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.attempts += 1
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å–ª–æ–≤–∞ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        if self.selected_language == language:
            self.selected_word = word
            self.selected_language = language
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        russian_word = word if language == 'russian' else self.selected_word
        armenian_word = word if language == 'armenian' else self.selected_word
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        for rus, arm in self.word_pairs:
            if rus == russian_word and arm == armenian_word:
                self.matched_pairs.add((rus, arm))
                self.selected_word = None
                self.selected_language = None
                return True
        
        # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        self.selected_word = None
        self.selected_language = None
        return False
    
    def check_match(self, russian_word: str, armenian_word: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞—Ä–º—è–Ω—Å–∫–∏–º —Å–ª–æ–≤–∞–º–∏.
        
        Args:
            russian_word: –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ.
            armenian_word: –ê—Ä–º—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ.
            
        Returns:
            True, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–∑—É—é—Ç –ø–∞—Ä—É, –∏–Ω–∞—á–µ False.
        """
        for rus, arm in self.word_pairs:
            if rus == russian_word and arm == armenian_word:
                return True
        return False
    
    def is_completed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞.
        
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        return len(self.matched_pairs) == len(self.word_pairs)
    
    def get_available_words(self, language: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
        
        Args:
            language: –Ø–∑—ã–∫ ('russian' –∏–ª–∏ 'armenian').
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.
        """
        if language == 'russian':
            all_words = self.russian_words
        else:
            all_words = self.armenian_words
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        matched_words = set()
        for rus, arm in self.matched_pairs:
            if language == 'russian':
                matched_words.add(rus)
            else:
                matched_words.add(arm)
        
        return [word for word in all_words if word not in matched_words]
    
    def get_status_message(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.
        """
        message = (
            f"üéÆ <b>–ò–≥—Ä–∞ '–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π'</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: <b>{len(self.matched_pairs)}/{len(self.word_pairs)}</b>\n"
            f"–ü–æ–ø—ã—Ç–æ–∫: <b>{self.attempts}</b>\n\n"
        )
        
        if self.selected_word:
            message += f"–í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ: <b>{self.selected_word}</b>\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã —Ä—É—Å—Å–∫–∏—Ö –∏ –∞—Ä–º—è–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
        if self.matched_pairs:
            message += "<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
            for rus, arm in self.matched_pairs:
                message += f"‚Ä¢ {rus} - {arm}\n"
        
        return message
    
    def get_game_result(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã.
        """
        message = (
            f"üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ {len(self.word_pairs)} –ø–∞—Ä —Å–ª–æ–≤ –∑–∞ {self.attempts} –ø–æ–ø—ã—Ç–æ–∫!\n\n"
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
        )
        
        for rus, arm in self.word_pairs:
            message += f"‚Ä¢ {rus} - {arm}\n"
        
        message += "\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?"
        
        return message