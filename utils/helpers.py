"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Armenian Learning Bot.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import re
import json
import random
import logging
from typing import List, Dict, Any, Optional, Union, Iterable, TypeVar, Iterator
from datetime import datetime, date, time

logger = logging.getLogger(__name__)

T = TypeVar('T')

def format_time(t: time) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É.
    
    Args:
        t: –û–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏.
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM).
    """
    return t.strftime("%H:%M")

def parse_time(time_str: str) -> Optional[time]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏.
    
    Args:
        time_str: –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM".
        
    Returns:
        –û–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if not re.match(r'^\d{1,2}:\d{2}$', time_str):
            return None
        
        hours, minutes = map(int, time_str.split(':'))
        
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            return time(hours, minutes)
        
        return None
    except (ValueError, TypeError):
        return None

def sanitize_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if not text:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    text = re.sub(r'\s+', ' ', text)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip()
    
    return text

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞.
        suffix: –°—É—Ñ—Ñ–∏–∫—Å, –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –∫ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω.
    """
    if not text:
        return ""
    
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ max_length - –¥–ª–∏–Ω–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    return text[:max_length - len(suffix)] + suffix

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
    Returns:
        –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ Markdown.
    """
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f"\\{char}")
    
    return text

def get_random_praise() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Ö–≤–∞–ª—É –¥–ª—è –ø–æ–æ—â—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        –°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞ –ø–æ—Ö–≤–∞–ª—ã.
    """
    praises = [
        "–û—Ç–ª–∏—á–Ω–æ! üëè",
        "–ú–æ–ª–æ–¥–µ—Ü! üéâ",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ‚ú®",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üåü",
        "–°—É–ø–µ—Ä! üî•",
        "–ë—Ä–∞–≤–æ! üëå",
        "–í–ø–µ—á–∞—Ç–ª—è–µ—Ç! üöÄ",
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üíØ",
        "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üèÜ"
    ]
    
    return random.choice(praises)

def calculate_percentage(part: Union[int, float], total: Union[int, float]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    
    Args:
        part: –ß–∞—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è.
        total: –û–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        
    Returns:
        –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (0-100).
    """
    if total == 0:
        return 0.0
    
    return (part / total) * 100

def format_date(d: date, format_str: str = "%d.%m.%Y") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É.
    
    Args:
        d: –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã.
        format_str: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã.
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã.
    """
    return d.strftime(format_str)

def chunked(iterable: Iterable[T], size: int) -> Iterator[List[T]]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ —á–∞–Ω–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
    
    Args:
        iterable: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç.
        size: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞.
        
    Returns:
        –ò—Ç–µ—Ä–∞—Ç–æ—Ä —á–∞–Ω–∫–æ–≤.
    """
    it = iter(iterable)
    while True:
        chunk = list(iter(lambda: next(it, None), None))[:size]
        if not chunk:
            break
        yield chunk

def levenshtein_distance(s1: str, s2: str) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏.
    
    Args:
        s1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
        s2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.
        
    Returns:
        –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞.
    """
    if len(s1) < len(s2):
        return levenshtein_distance(s2, s1)
    
    if len(s2) == 0:
        return len(s1)
    
    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    
    return previous_row[-1]

def load_json(file_path: str) -> Optional[Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def save_json(data: Dict[str, Any], file_path: str) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        
    Returns:
        True, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON –≤ —Ñ–∞–π–ª {file_path}: {e}")
        return False

def is_valid_word(word: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Å–ª–æ–≤–æ–º.
    
    Args:
        word: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        
    Returns:
        True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Å–ª–æ–≤–æ–º, –∏–Ω–∞—á–µ False.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –Ω–µ –ø—É—Å—Ç–∞
    return bool(word) and all(c.isalpha() or c.isspace() for c in word)

def extract_command_args(text: str) -> List[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    """
    # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å /)
    command_match = re.match(r'^/\w+', text)
    if command_match:
        text = text[command_match.end():].strip()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —É—á–∏—Ç—ã–≤–∞—è –∫–∞–≤—ã—á–∫–∏
    args = []
    current_arg = []
    in_quotes = False
    quote_char = None
    
    for char in text:
        if char in ('"', "'") and (not in_quotes or char == quote_char):
            in_quotes = not in_quotes
            quote_char = char if in_quotes else None
        elif char.isspace() and not in_quotes:
            if current_arg:
                args.append(''.join(current_arg))
                current_arg = []
        else:
            current_arg.append(char)
    
    if current_arg:
        args.append(''.join(current_arg))
    
    return args

def get_user_mention(user_id: int, username: Optional[str] = None, full_name: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if username:
        return f"@{username}"
    elif full_name:
        return f"[{full_name}](tg://user?id={user_id})"
    else:
        return f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"

def get_time_diff_text(dt: datetime) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.
    
    Args:
        dt: –î–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏.
    """
    now = datetime.now()
    diff = now - dt
    
    if diff.days < 0:
        # –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        return "–≤ –±—É–¥—É—â–µ–º"
    
    if diff.days == 0:
        # –°–µ–≥–æ–¥–Ω—è
        hours = diff.seconds // 3600
        minutes = (diff.seconds % 3600) // 60
        
        if hours == 0:
            if minutes == 0:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            elif minutes == 1:
                return "–º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"
            elif minutes < 5:
                return f"{minutes} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"
            else:
                return f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        elif hours == 1:
            return "—á–∞—Å –Ω–∞–∑–∞–¥"
        elif hours < 5:
            return f"{hours} —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
        else:
            return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    
    elif diff.days == 1:
        # –í—á–µ—Ä–∞
        return "–≤—á–µ—Ä–∞"
    
    elif diff.days < 7:
        # –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        return f"{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    
    elif diff.days < 30:
        # –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        weeks = diff.days // 7
        if weeks == 1:
            return "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥"
        elif weeks < 5:
            return f"{weeks} –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥"
        else:
            return f"{weeks} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥"
    
    elif diff.days < 365:
        # –í —ç—Ç–æ–º –≥–æ–¥—É
        months = diff.days // 30
        if months == 1:
            return "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥"
        elif months < 5:
            return f"{months} –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥"
        else:
            return f"{months} –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥"
    
    else:
        # –ë–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥
        years = diff.days // 365
        if years == 1:
            return "–≥–æ–¥ –Ω–∞–∑–∞–¥"
        elif years < 5:
            return f"{years} –≥–æ–¥–∞ –Ω–∞–∑–∞–¥"
        else:
            return f"{years} –ª–µ—Ç –Ω–∞–∑–∞–¥"